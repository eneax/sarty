import firebase from 'firebase/app'
import 'firebase/firestore' // for the db
import 'firebase/auth' // for authentication


// the object inside the config variable is auto-generated by firebase and we can copy it from `https://console.firebase.google.com`
const config = {
  apiKey: "AIzaSyD-EMND8rdae34AG5eDZB8Hpb8JGKMr83Y",
  authDomain: "sarty-x.firebaseapp.com",
  databaseURL: "https://sarty-x.firebaseio.com",
  projectId: "sarty-x",
  storageBucket: "",
  messagingSenderId: "389919018804",
  appId: "1:389919018804:web:579d1af62111d5a8"
}

// async because we make an API request
// userAuth is the object that we get from the auth library
// additionalData that we are gonna need later for the signup
export const createUserProfileDocument = async (userAuth, additionalData) => {
  // * if the user auth object does not exist, then exit from this function
  if (!userAuth) return

  // * if userAuth exists, we want to query inside Firestore doc to see if it already exists
  // uid --> it's a dynamic user id that Google generates when the user authenticates with 'Sign In with Google'
  const userRef = firestore.doc(`users/${userAuth.uid}`)

  const snapShot = await userRef.get()

  // * if there is no user, create a new one
  if (!snapShot.exists) {

    // * define the data that we want to store (name, email, time)
    const { displayName, email } = userAuth
    const createdAt = new Date()

    // * async request to DB to store the data
    try {
      await userRef.set({
        displayName,
        email,
        createdAt,
        ...additionalData
      })
    } catch (error) {
      console.log('Error creating user: ', error.message)
    }
  }

  return userRef
}

firebase.initializeApp(config)

// export auth and db
export const auth = firebase.auth()
export const firestore = firebase.firestore()


// * setup Google authentication utility
const provider = new firebase.auth.GoogleAuthProvider() // gives us access to GoogleAuthProvider
provider.setCustomParameters({ prompt: 'select_account' }) // we always want to trigger the Google login popup whenever we use GoogleAuthProvider for auth and sign in
export const signInWithGoogle = () => auth.signInWithPopup(provider) // there are many sign in (like Facebook, Twitter etc.), but we want only Google

export default firebase





/*

Firestore returns us two types of objects, even if nothing exists from the query: references and snapshots 
They can be either Document or Collection versions.


* queryReference 
- is an object that represents the “current” place in the database that we are querying
- does not have the actual data of the collection or document
- It instead has properties that tell us details about it, or the method to get the Snapshot object which gives us the data we are looking for.

```
firestore.doc(‘/users/:userId’);
firestore.collections(‘/users’);
```


* DocumentReference vs CollectionReference
We use documentRef objects to perform our CRUD methods (create, retrieve, update, delete). 
The documentRef methods are .set(), .get(), .update() and .delete() respectively

We can also add documents to collections using the collectionRef object using the .add() method. 

```
collectionRef.add({
  value: prop
})
```

We get the snapshotObject from the referenceObject using the .get() method. 

```
documentRef.get()
``` 
which returns a documentSnapshot object;

or 

```
collectionRef.get()
``` 
which returns a querySnapshot object.


* documentSnapshot
We get a documentSnapshot object from our documentReference object.

The documentSnapshot object allows us to check if a document exists at this query 
using the .exists property which returns a boolean.

We can also get the actual properties on the object by calling
the .data() method, which returns us a JSON object of the document.


* querySnapshot
We get a querySnapshot object from our collectionReference object. 

We can check if there are any documents in the collection by calling
the .empty property which returns a boolean.

We can get all the documents in the collection by calling the .docs property.
It returns an array of our documents as documentSnapshot objects.

*/